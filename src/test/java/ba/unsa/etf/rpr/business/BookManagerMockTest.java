package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.BookDaoSQLImpl;
import ba.unsa.etf.rpr.domain.Book;
import ba.unsa.etf.rpr.exceptions.LibraryException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class BookManagerMockTest {
    private BookManager bookManager;
    private Book book;
    private BookDaoSQLImpl bookDaoSQL;
    private List<Book> books;

    @BeforeEach
    public void setup() {
        bookManager = Mockito.mock(BookManager.class);
        book = new Book();
        book.setId(1);
        book.setTitle("Test Book");
        book.setAuthor("Test Author");
        book.setYearOfPublication("2023");
        book.setGenre("Test Genre");
        book.setTotalNumber(100);
        book.setAvailableNumber(90);
        bookDaoSQL = Mockito.mock(BookDaoSQLImpl.class);
        books = new ArrayList<>();
        books.addAll(Arrays.asList(
                new Book("Test Title 1", "Test Author 1", "2023", "Genre 1", 10, 10),
                new Book("Test Title 2", "Test Author 2", "2023", "Genre 2", 10, 10),
                new Book("Test Title 3", "Test Author 3", "2023", "Genre 3", 10, 10),
                new Book("Test Title 4", "Test Author 4", "2023", "Genre 4", 10, 10)
        ));
    }
    @Test
    public void testValidateValid() {
        try {
            Mockito.doCallRealMethod().when(bookManager).validateBook(book);
            bookManager.validateBook(book);
        } catch (LibraryException e) {
            fail();
        }
    }
    @Test
    public void testValidateInvalid() {
        book.setTitle(" ");
        boolean exceptionCaught = false;
        try {
            Mockito.doCallRealMethod().when(bookManager).validateBook(book);
            bookManager.validateBook(book);
        } catch (LibraryException e) {
            exceptionCaught = true;
        }
        assertTrue(exceptionCaught);
    }
    @Test
    public void testAdd() throws LibraryException {
        bookManager.add(book);
        assertTrue(true);
        Mockito.verify(bookManager).add(book);
    }
    @Test
    public void testAddWithId() throws LibraryException {
        Mockito.doCallRealMethod().when(bookManager).add(book);
        // member has a value set for id, which should throw an exception
        LibraryException exception = assertThrows(
                LibraryException.class,
                () -> bookManager.add(book),
                "Expected update to throw LibraryException, but it didn't"
        );
        assertEquals(exception.getMessage(), "Can't add book with ID. ID is autogenerated");
        Mockito.verify(bookManager).add(book);
    }
    @Test
    public void testDelete() throws LibraryException {
        bookManager.delete(book);
        assertTrue(true);
        Mockito.verify(bookManager).delete(book);
    }
}
